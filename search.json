[{"path":"https://gaborcsardi.github.io/tsjson/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tsjson authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. . Copyright holder, funder. tree-sitter-json authors. Contributor.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G (2025). tsjson: Edit JSON Files. R package version 0.0.0.9000, https://github.com/gaborcsardi/tsjson.","code":"@Manual{,   title = {tsjson: Edit JSON Files},   author = {Gábor Csárdi},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/gaborcsardi/tsjson}, }"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"tsjson","dir":"","previous_headings":"","what":"Edit JSON Files","title":"Edit JSON Files","text":"Extract manipulate parts JSON files without touching formatting comments parts.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Edit JSON Files","text":"can install development version tsjson GitHub :","code":"# install.packages(\"pak\") pak::pak(\"gaborcsardi/tsjson\")"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Edit JSON Files","text":"See https://gaborcsardi.github.io/tsjson/ also installed package: help(package = \"tsjson\").","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"create-a-tjson-object","dir":"","previous_headings":"Quickstart","what":"Create a tjson object","title":"Edit JSON Files","text":"Create tsjson object string: Pretty print tsjson object:","code":"txt <- r\"( // this is a comment {   \"a\": {     \"a1\": [1, 2, 3],     // comment     \"a2\": \"string\"   },   \"b\": [     {       \"b11\": true,       \"b12\": false     },     {       \"b21\": false,       \"b22\": false     }   ] } )\" json <- load_json(text = txt) json #> # json (19 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": [1, 2, 3], #>  6 |     // comment #>  7 |     \"a2\": \"string\" #>  8 |   }, #>  9 |   \"b\": [ #> 10 |     { #> ℹ 9 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"select-elements-in-a-tsjson-object","dir":"","previous_headings":"Quickstart","what":"Select elements in a tsjson object","title":"Edit JSON Files","text":"Select element objects key: Select element inside element: Select element(s) array: Select multiple keys object: Select nodes match tree-sitter query:","code":"select(json, \"a\") #> # json (19 lines, 1 selected element) #>    1  |  #>    2  | // this is a comment #>    3  | { #> >  4  |   \"a\": { #> >  5  |     \"a1\": [1, 2, 3], #> >  6  |     // comment #> >  7  |     \"a2\": \"string\" #> >  8  |   }, #>    9  |   \"b\": [ #>   10  |     { #>   11  |       \"b11\": true, #>   ... select(json, \"a\", \"a1\") #> # json (19 lines, 1 selected element) #>   2   | // this is a comment #>   3   | { #>   4   |   \"a\": { #> > 5   |     \"a1\": [1, 2, 3], #>   6   |     // comment #>   7   |     \"a2\": \"string\" #>   8   |   }, #>   ... select(json, \"a\", \"a1\", 1:2) #> # json (19 lines, 2 selected elements) #>   2   | // this is a comment #>   3   | { #>   4   |   \"a\": { #> > 5   |     \"a1\": [1, 2, 3], #>   6   |     // comment #>   7   |     \"a2\": \"string\" #>   8   |   }, #>   ... select(json, \"a\", c(\"a1\", \"a2\")) #> # json (19 lines, 2 selected elements) #>    2  | // this is a comment #>    3  | { #>    4  |   \"a\": { #> >  5  |     \"a1\": [1, 2, 3], #>    6  |     // comment #> >  7  |     \"a2\": \"string\" #>    8  |   }, #>    9  |   \"b\": [ #>   10  |     { #>   ... json |> select_query(\"((pair value: (false) @val))\") #> # json (19 lines, 3 selected elements) #>   ... #>    9  |   \"b\": [ #>   10  |     { #>   11  |       \"b11\": true, #> > 12  |       \"b12\": false #>   13  |     }, #>   14  |     { #> > 15  |       \"b21\": false, #> > 16  |       \"b22\": false #>   17  |     } #>   18  |   ] #>   19  | }"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"delete-elements","dir":"","previous_headings":"Quickstart","what":"Delete elements","title":"Edit JSON Files","text":"Delete selected elements:","code":"select(json, \"a\", \"a1\") |> delete_selected() #> # json (18 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     // comment #>  6 |     \"a2\": \"string\" #>  7 |   }, #>  8 |   \"b\": [ #>  9 |     { #> 10 |       \"b11\": true, #> ℹ 8 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"insert-elements","dir":"","previous_headings":"Quickstart","what":"Insert elements","title":"Edit JSON Files","text":"Insert element array: Inserting array reformats array. Insert element object, specified key:","code":"select(json, \"a\", \"a1\") |> insert_into_selected(at = 2, \"new\") #> # json (24 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": [ #>  6 |         1, #>  7 |         2, #>  8 |         \"new\", #>  9 |         3 #> 10 |     ], #> ℹ 14 more lines #> ℹ Use `print(n = ...)` to see more lines select(json, \"a\") |>   insert_into_selected(key = \"a0\", at = 0, list(\"new\", \"element\")) #> # json (27 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |       \"a0\": [ #>  6 |           \"new\", #>  7 |           \"element\" #>  8 |       ], #>  9 |       \"a1\": [ #> 10 |           1, #> ℹ 17 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"update-elements","dir":"","previous_headings":"Quickstart","what":"Update elements","title":"Edit JSON Files","text":"Update existing element: Inserts element parents missing:","code":"select(json, \"a\", c(\"a1\", \"a2\")) |> update_selected(\"new value\") #> # json (19 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": \"new value\", #>  6 |     // comment #>  7 |     \"a2\": \"new value\" #>  8 |   }, #>  9 |   \"b\": [ #> 10 |     { #> ℹ 9 more lines #> ℹ Use `print(n = ...)` to see more lines json <- load_json(text = \"{ \\\"a\\\": { \\\"b\\\": true } }\") json #> # json (1 line) #> 1 | { \"a\": { \"b\": true } } select(json, \"a\", \"x\", \"y\") |> update_selected(list(1,2,3)) #> # json (10 lines) #>  1 | { \"a\": { #>  2 |     \"b\": true, #>  3 |     \"x\": { #>  4 |         \"y\": [ #>  5 |             1, #>  6 |             2, #>  7 |             3 #>  8 |         ] #>  9 |     } #> 10 | } }"},{"path":"https://gaborcsardi.github.io/tsjson/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Edit JSON Files","text":"MIT © Posit Software, PBC","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete selected elements from a tsjson object — delete_selected","title":"Delete selected elements from a tsjson object — delete_selected","text":"formatting rest JSON document kept . Comments appearing inside deleted elements also deleted. comments left .","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete selected elements from a tsjson object — delete_selected","text":"","code":"delete_selected(json)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete selected elements from a tsjson object — delete_selected","text":"json tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete selected elements from a tsjson object — delete_selected","text":"Modified tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete selected elements from a tsjson object — delete_selected","text":"json selection whole document deleted. json empty selection, nothing delted.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/delete_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete selected elements from a tsjson object — delete_selected","text":"","code":"json <- load_json(text = \"{ \\\"a\\\": //comment\\ntrue, \\\"b\\\": [1, 2, 3] }\") json #> # json (2 lines) #> 1 | { \"a\": //comment #> 2 | true, \"b\": [1, 2, 3] }  json |> select(\"a\") #> # json (2 lines, 1 selected element) #>   1 | { \"a\": //comment #> > 2 | true, \"b\": [1, 2, 3] } json |> select(\"a\") |> delete_selected() #> # json (1 line) #> 1 | { \"b\": [1, 2, 3] }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a tsjson object — format.tsjson","title":"Format a tsjson object — format.tsjson","text":"Format tsjson object printing.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a tsjson object — format.tsjson","text":"","code":"# S3 method for class 'tsjson' format(x, n = 10, ...)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a tsjson object — format.tsjson","text":"x tsjson object. n Number lines, number selections print. ... Ignored.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a tsjson object — format.tsjson","text":"Character vector.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a tsjson object — format.tsjson","text":"engine print.tsjson(), possibly useful obtain printed representation without actual printing.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format.tsjson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a tsjson object — format.tsjson","text":"","code":"json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) )))  json #> # json (21 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     \"a1\": [ #>  4 |       1, #>  5 |       2, #>  6 |       3 #>  7 |     ], #>  8 |     \"a2\": \"string\" #>  9 |   }, #> 10 |   \"b\": [ #> ℹ 11 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the selected JSON elements — format_selected","title":"Format the selected JSON elements — format_selected","text":"Format selected JSON elements","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the selected JSON elements — format_selected","text":"","code":"format_selected(json, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the selected JSON elements — format_selected","text":"json tsjson object. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the selected JSON elements — format_selected","text":"updated tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format the selected JSON elements — format_selected","text":"json selection, formatted. json empty selection, nothing happens.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/format_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the selected JSON elements — format_selected","text":"","code":"json <- load_json(text = \"{ \\\"a\\\": [1,2,3] }\") json #> # json (1 line) #> 1 | { \"a\": [1,2,3] }  json |> format_selected() #> # json (7 lines) #> 1 | { #> 2 |     \"a\": [ #> 3 |         1, #> 4 |         2, #> 5 |         3 #> 6 |     ] #> 7 | }  json |> select(\"a\") |> format_selected() #> # json (5 lines) #> 1 | { \"a\": [ #> 2 |     1, #> 3 |     2, #> 4 |     3 #> 5 | ] }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"Insert new element selected array object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"","code":"insert_into_selected(json, new, key = NULL, at = Inf, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"json tsjson object new New element insert. serialized serialize_json(). key Key new element, inserting object. position insert new element : 0: beginning, Inf: end, numbers: specified element, character scalar, key new element inserted, key exists, inserting object. key exist, new element inserted end object. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"modified tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"error trying insert element array object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/insert_into_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a new element into the selected ones in a tsjson object — insert_into_selected","text":"","code":"json <- load_json(text = \"{ \\\"a\\\": true, \\\"b\\\": [1, 2, 3] }\") json #> # json (1 line) #> 1 | { \"a\": true, \"b\": [1, 2, 3] }  json |> select(\"b\") |> insert_into_selected(\"foo\", at = 1) #> # json (6 lines) #> 1 | { \"a\": true, \"b\": [ #> 2 |     1, #> 3 |     \"foo\", #> 4 |     2, #> 5 |     3 #> 6 | ] }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a JSON file or string into a tsjson object — load_json","title":"Parse a JSON file or string into a tsjson object — load_json","text":"Parse JSON file string create tsjson object represents document. object can queried manipulated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a JSON file or string into a tsjson object — load_json","text":"","code":"load_json(file = NULL, text = NULL, ranges = NULL, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a JSON file or string into a tsjson object — load_json","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a JSON file or string into a tsjson object — load_json","text":"tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse a JSON file or string into a tsjson object — load_json","text":"tsjson objects format() print() methods pretty-print screen. can converted data frame using single bracket operator.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/load_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a JSON file or string into a tsjson object — load_json","text":"","code":"text <- ' {   \"a\": 1,   \"b\": [2, 3, 4],   \"[r]\": {     \"this\": \"setting\",     // A comment!     \"that\": true   } } '  # Parse the JSON, allowing comments (i.e. JSONC) load_json(text = text) #> # json (10 lines) #>  1 |  #>  2 | { #>  3 |   \"a\": 1, #>  4 |   \"b\": [2, 3, 4], #>  5 |   \"[r]\": { #>  6 |     \"this\": \"setting\", #>  7 |     // A comment! #>  8 |     \"that\": true #>  9 |   } #> 10 | }  # Try to parse the JSON, but comments aren't allowed! try(load_json(text = text, options = list(allow_comments = FALSE))) #> Error in token_table(text = text, ranges = ranges, options = options) :  #>   The JSON document contains comments, and this is not allowed. To allow comments, set the `allow_comments` option to `TRUE`.  # Extract parts of the JSON load_json(text = text) |> select(\"b\") |> unserialize_selected() #> [[1]] #> [[1]][[1]] #> [1] 2 #>  #> [[1]][[2]] #> [1] 3 #>  #> [[1]][[3]] #> [1] 4 #>  #>  load_json(text = text) |> select(\"[r]\") |> unserialize_selected() #> [[1]] #> [[1]]$this #> [1] \"setting\" #>  #> [[1]]$that #> [1] TRUE #>  #>  load_json(text = text) |> select(\"[r]\", \"that\") |> unserialize_selected() #> [[1]] #> [1] TRUE #>   # Use a `list()` combining strings and positional indices when # arrays are involved load_json(text = text) |> select(\"b\", 2) |> unserialize_selected() #> [[1]] #> [1] 3 #>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/print.tsjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a tsjson object — print.tsjson","title":"Print a tsjson object — print.tsjson","text":"Calls format.tsjson() format tsjson object, writes formatted object standard output, returns original object invisibly.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/print.tsjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a tsjson object — print.tsjson","text":"","code":"# S3 method for class 'tsjson' print(x, n = 10, ...)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/print.tsjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a tsjson object — print.tsjson","text":"x tsjson object. n Number lines, number selections print. ... Ignored.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/print.tsjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a tsjson object — print.tsjson","text":"x, invisibly.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/print.tsjson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a tsjson object — print.tsjson","text":"","code":"json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) )))  json #> # json (21 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     \"a1\": [ #>  4 |       1, #>  5 |       2, #>  6 |       3 #>  7 |     ], #>  8 |     \"a2\": \"string\" #>  9 |   }, #> 10 |   \"b\": [ #> ℹ 11 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tree-sitter queries on a JSON file or string — query_json","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"See https://tree-sitter.github.io/tree-sitter/ writing tree-sitter queries.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"","code":"query_json(file = NULL, text = NULL, query, ranges = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. query Character string, tree-sitter query run. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"list entries patterns matched_captures. patterns contains information patterns queries data frame columns: id, name, pattern, match_count. matched_captures contains information matches, columns id, pattern, match, type start_byte, end_byte, start_row, start_column, end_row, end_column, name, code. pattern column matched_captured refers id column patterns.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"See select_query() documentation nodes JSON grammar.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/query_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run tree-sitter queries on a JSON file or string — query_json","text":"","code":"# A very simple JSON document txt <- \"{ \\\"a\\\": 1, \\\"b\\\": \\\"foo\\\", \\\"c\\\": 20 }\"  # Take a look at it load_json(text = txt) |> format_selected() #> # json (5 lines) #> 1 | { #> 2 |     \"a\": 1, #> 3 |     \"b\": \"foo\", #> 4 |     \"c\": 20 #> 5 | }  # Select all pairs where the value is a number query_json(text = txt, query = \"((pair value: (number) @num))\") #> $patterns #> # A data frame: 1 × 4 #>      id name  pattern                           match_count #>   <int> <chr> <chr>                                   <int> #> 1     1 NA    \"((pair value: (number) @num))\\n\"           2 #>  #> $matched_captures #> # A data frame: 2 × 12 #>      id pattern match type   start_byte end_byte start_row start_column #>   <int>   <int> <int> <chr>       <int>    <int>     <int>        <int> #> 1     1       1     1 number          7        8         0            7 #> 2     1       1     2 number         27       29         0           27 #> # ℹ 4 more variables: end_row <int>, end_column <int>, name <chr>, #> #   code <chr> #>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":null,"dir":"Reference","previous_headings":"","what":"tsjson quickstart — quickstart","title":"tsjson quickstart — quickstart","text":"tsjson quickstart","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":"create-a-tjson-object","dir":"Reference","previous_headings":"","what":"Create a tjson object","title":"tsjson quickstart — quickstart","text":"Create tsjson object string:   Pretty print tsjson object:","code":"txt <- r\"( // this is a comment {   \"a\": {     \"a1\": [1, 2, 3],     // comment     \"a2\": \"string\"   },   \"b\": [     {       \"b11\": true,       \"b12\": false     },     {       \"b21\": false,       \"b22\": false     }   ] } )\" json <- load_json(text = txt) json #> # json (19 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": [1, 2, 3], #>  6 |     // comment #>  7 |     \"a2\": \"string\" #>  8 |   }, #>  9 |   \"b\": [ #> 10 |     { #> ℹ 9 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":"select-elements-in-a-tsjson-object","dir":"Reference","previous_headings":"","what":"Select elements in a tsjson object","title":"tsjson quickstart — quickstart","text":"Select element objects key:   Select element inside element:   Select element(s) array:   Select multiple keys object:   Select nodes match tree-sitter query:","code":"select(json, \"a\") #> # json (19 lines, 1 selected element) #>    1  |  #>    2  | // this is a comment #>    3  | { #> >  4  |   \"a\": { #> >  5  |     \"a1\": [1, 2, 3], #> >  6  |     // comment #> >  7  |     \"a2\": \"string\" #> >  8  |   }, #>    9  |   \"b\": [ #>   10  |     { #>   11  |       \"b11\": true, #>   ... select(json, \"a\", \"a1\") #> # json (19 lines, 1 selected element) #>   2   | // this is a comment #>   3   | { #>   4   |   \"a\": { #> > 5   |     \"a1\": [1, 2, 3], #>   6   |     // comment #>   7   |     \"a2\": \"string\" #>   8   |   }, #>   ... select(json, \"a\", \"a1\", 1:2) #> # json (19 lines, 2 selected elements) #>   2   | // this is a comment #>   3   | { #>   4   |   \"a\": { #> > 5   |     \"a1\": [1, 2, 3], #>   6   |     // comment #>   7   |     \"a2\": \"string\" #>   8   |   }, #>   ... select(json, \"a\", c(\"a1\", \"a2\")) #> # json (19 lines, 2 selected elements) #>    2  | // this is a comment #>    3  | { #>    4  |   \"a\": { #> >  5  |     \"a1\": [1, 2, 3], #>    6  |     // comment #> >  7  |     \"a2\": \"string\" #>    8  |   }, #>    9  |   \"b\": [ #>   10  |     { #>   ... json |> select_query(\"((pair value: (false) @val))\") #> Error in select_query(json, \"((pair value: (false) @val))\") : #>   could not find function \"select_query\""},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":"delete-elements","dir":"Reference","previous_headings":"","what":"Delete elements","title":"tsjson quickstart — quickstart","text":"Delete selected elements:","code":"select(json, \"a\", \"a1\") |> delete_selected() #> # json (18 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     // comment #>  6 |     \"a2\": \"string\" #>  7 |   }, #>  8 |   \"b\": [ #>  9 |     { #> 10 |       \"b11\": true, #> ℹ 8 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":"insert-elements","dir":"Reference","previous_headings":"","what":"Insert elements","title":"tsjson quickstart — quickstart","text":"Insert element array:   Inserting array reformats array. Insert element object, specified key:","code":"select(json, \"a\", \"a1\") |> insert_into_selected(at = 2, \"new\") #> # json (24 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": [ #>  6 |       1, #>  7 |       2, #>  8 |       \"new\", #>  9 |       3 #> 10 |     ], #> ℹ 14 more lines #> ℹ Use `print(n = ...)` to see more lines select(json, \"a\") |>   insert_into_selected(key = \"a0\", at = 0, list(\"new\", \"element\")) #> # json (27 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a0\": [ #>  6 |       \"new\", #>  7 |       \"element\" #>  8 |     ], #>  9 |     \"a1\": [ #> 10 |       1, #> ℹ 17 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/quickstart.html","id":"update-elements","dir":"Reference","previous_headings":"","what":"Update elements","title":"tsjson quickstart — quickstart","text":"Update existing element:   Inserts element parents missing:","code":"select(json, \"a\", c(\"a1\", \"a2\")) |> update_selected(\"new value\") #> # json (19 lines) #>  1 |  #>  2 | // this is a comment #>  3 | { #>  4 |   \"a\": { #>  5 |     \"a1\": \"new value\", #>  6 |     // comment #>  7 |     \"a2\": \"new value\" #>  8 |   }, #>  9 |   \"b\": [ #> 10 |     { #> ℹ 9 more lines #> ℹ Use `print(n = ...)` to see more lines json <- load_json(text = \"{ \\\"a\\\": { \\\"b\\\": true } }\") json #> # json (1 line) #> 1 | { \"a\": { \"b\": true } } select(json, \"a\", \"x\", \"y\") |> update_selected(list(1,2,3)) #> # json (10 lines) #>  1 | { \"a\": { #>  2 |   \"b\": true, #>  3 |   \"x\": { #>  4 |     \"y\": [ #>  5 |       1, #>  6 |       2, #>  7 |       3 #>  8 |     ] #>  9 |   } #> 10 | } }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/save_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a tsjson object to a file — save_json","title":"Write a tsjson object to a file — save_json","text":"Write tsjson object file","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/save_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a tsjson object to a file — save_json","text":"","code":"save_json(json, file = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/save_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a tsjson object to a file — save_json","text":"json tsjson object. file File connection write . binary text connections supported. Use stdout() output screen.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/save_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a tsjson object to a file — save_json","text":"Nothing.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Update selected elements in a tsjson object — select-set","title":"Update selected elements in a tsjson object — select-set","text":"Update selected elements JSON document, using replacement function syntax.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update selected elements in a tsjson object — select-set","text":"","code":"select(json, ...) <- value  # S3 method for class 'tsjson' x[[i]] <- value"},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update selected elements in a tsjson object — select-set","text":"value New value. serialized JSON serialize_json(). x, json tsjson object. Create tsjson object load_json(). , ... Selectors, see select().","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update selected elements in a tsjson object — select-set","text":"updated tsjson object. deleted() returns marker object used right hand side select<-() double bracket replacement functions, see examples .","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update selected elements in a tsjson object — select-set","text":"Technically select<-() equivalent select_refine() plus update_selected(). case value deleted() special marker delete elements tsjson object select<-() double bracket operator.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/select-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update selected elements in a tsjson object — select-set","text":"","code":"json <- load_json(text = \"{}\")  json <- json |> select(\"r\", \"editor.formatOnSave\") |> update_selected(TRUE) json #> # json (5 lines) #> 1 | { #> 2 |     \"r\": { #> 3 |         \"editor.formatOnSave\": true #> 4 |     } #> 5 | }  json <- json |> select(\"r\", \"editor.formatOnSave\") |> delete_selected() json #> # json (4 lines) #> 1 | { #> 2 |     \"r\": { #> 3 |         } #> 4 | }  # Insert an array json <- json |> select(\"foo\") |> update_selected(1:3) json #> # json (8 lines) #> 1 | { #> 2 |     \"r\": {}, #> 3 |     \"foo\": [ #> 4 |         1, #> 5 |         2, #> 6 |         3 #> 7 |     ] #> 8 | }  # Update the array at location 2 json |> select(\"foo\", 2) |> update_selected(0) #> # json (8 lines) #> 1 | { #> 2 |     \"r\": {}, #> 3 |     \"foo\": [ #> 4 |         1, #> 5 |         0, #> 6 |         3 #> 7 |     ] #> 8 | }  # Insert at location 2 json |> select(\"foo\") |> insert_into_selected(0, at = 2) #> # json (9 lines) #> 1 | { #> 2 |     \"r\": {}, #> 3 |     \"foo\": [ #> 4 |         1, #> 5 |         2, #> 6 |         0, #> 7 |         3 #> 8 |     ] #> 9 | }  # Insert at the end of the array with `Inf` as `at` json |> select(\"foo\") |> insert_into_selected(0, at = Inf) #> # json (9 lines) #> 1 | { #> 2 |     \"r\": {}, #> 3 |     \"foo\": [ #> 4 |         1, #> 5 |         2, #> 6 |         3, #> 7 |         0 #> 8 |     ] #> 9 | }  # Only the modified elements are reformatted json <- load_json(text = '{\"foo\":[1,2],\\n\"bar\":1}') json |> select(\"foo\") |> insert_into_selected(0, at = Inf) #> # json (6 lines) #> 1 | {\"foo\":[ #> 2 |     1, #> 3 |     2, #> 4 |     0 #> 5 | ], #> 6 | \"bar\":1}  # You can control how those elements are formatted json |> select(\"foo\") |>   insert_into_selected(0, at = Inf, options = list(indent_width = 2)) #> # json (6 lines) #> 1 | {\"foo\":[ #> 2 |   1, #> 3 |   2, #> 4 |   0 #> 5 | ], #> 6 | \"bar\":1}  # Using `deleted()` to delete elements json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) )))  select(json, list(\"a\", \"a1\")) <- deleted() json #> # json (16 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     \"a2\": \"string\" #>  4 |   }, #>  5 |   \"b\": [ #>  6 |     4, #>  7 |     5, #>  8 |     6 #>  9 |   ], #> 10 |   \"c\": { #> ℹ 6 more lines #> ℹ Use `print(n = ...)` to see more lines  json[[list(\"a\", \"a2\")]] <- deleted() json #> # json (15 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     }, #>  4 |   \"b\": [ #>  5 |     4, #>  6 |     5, #>  7 |     6 #>  8 |   ], #>  9 |   \"c\": { #> 10 |     \"c1\": [ #> ℹ 5 more lines #> ℹ Use `print(n = ...)` to see more lines"},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select elements in a tsjson object — select","title":"Select elements in a tsjson object — select","text":"function heart tsjson. delete manipulate parts JSON document, need select() parts first. insert new elements JSON document, need select arrays objects elements inserted .","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select elements in a tsjson object — select","text":"","code":"select(json, ...)  # S3 method for class 'tsjson' x[[i, ...]]  select_refine(json, ...)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select elements in a tsjson object — select","text":"x, json tsjson object. , ... Selectors, see .","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select elements in a tsjson object — select","text":"tsjson object, potentially elements selected.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"selectors","dir":"Reference","previous_headings":"","what":"Selectors","title":"Select elements in a tsjson object — select","text":"can use list selectors iteratively refine selection JSON elements, starting document element (default selection). select() list selectors may specified single list argument, multiple arguments. Available selectors: TRUE selects child elements current selections. character vector selects named child elements selected objects. Selects nothing arrays. numeric vector selectes listed child elements selected arrays objects. Positive (1-based) indices counted beginning, negative indices counted end array object. E.g. -1 last element (). character scalar named \"regex\", regular expression. selects child elements whose keys match regular expression. Selects nothing arrays.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"refining-selections","dir":"Reference","previous_headings":"","what":"Refining selections","title":"Select elements in a tsjson object — select","text":"select_refine() similar select(), starts already selected elements (simultanously), instead starting document element.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"the-and-lt-operators","dir":"Reference","previous_headings":"","what":"The [[ and [[<- operators","title":"Select elements in a tsjson object — select","text":"[[ operator works similarly select_refine() tsjson objects, might readable. [[<- operator works similarly select<-(), might readable.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select elements in a tsjson object — select","text":"","code":"json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) )))  json #> # json (21 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     \"a1\": [ #>  4 |       1, #>  5 |       2, #>  6 |       3 #>  7 |     ], #>  8 |     \"a2\": \"string\" #>  9 |   }, #> 10 |   \"b\": [ #> ℹ 11 more lines #> ℹ Use `print(n = ...)` to see more lines  # Select object by key json |> select(\"a\") #> # json (21 lines, 1 selected element) #>    1  | { #> >  2  |   \"a\": { #> >  3  |     \"a1\": [ #> >  4  |       1, #> >  5  |       2, #> >  6  |       3 #> >  7  |     ], #> >  8  |     \"a2\": \"string\" #> >  9  |   }, #>   10  |   \"b\": [ #>   11  |     4, #>   12  |     5, #>   ...     # Select within select, these are the same json |> select(\"a\", \"a1\") #> # json (21 lines, 1 selected element) #>    1  | { #>    2  |   \"a\": { #> >  3  |     \"a1\": [ #> >  4  |       1, #> >  5  |       2, #> >  6  |       3 #> >  7  |     ], #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #>   ...    json |> select(list(\"a\", \"a1\")) #> # json (21 lines, 1 selected element) #>    1  | { #>    2  |   \"a\": { #> >  3  |     \"a1\": [ #> >  4  |       1, #> >  5  |       2, #> >  6  |       3 #> >  7  |     ], #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #>   ...     # Select elements of an array json |> select(\"b\", TRUE)           # all elements #> # json (21 lines, 3 selected elements) #>   ...    #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #> > 11  |     4, #> > 12  |     5, #> > 13  |     6 #>   14  |   ], #>   15  |   \"c\": { #>   16  |     \"c1\": [ #>   ...    json |> select(\"b\", 1:2)            # first two elements #> # json (21 lines, 2 selected elements) #>   ...    #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #> > 11  |     4, #> > 12  |     5, #>   13  |     6 #>   14  |   ], #>   15  |   \"c\": { #>   ...    json |> select(\"b\", c(1, -1))       # first and last elements #> # json (21 lines, 2 selected elements) #>   ...    #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #> > 11  |     4, #>   12  |     5, #> > 13  |     6 #>   14  |   ], #>   15  |   \"c\": { #>   16  |     \"c1\": [ #>   ...     # Regular expressions json |> select(c(\"a\", \"c\"), c(regex = \"1$\")) #> # json (21 lines, 2 selected elements) #>    1  | { #>    2  |   \"a\": { #> >  3  |     \"a1\": [ #> >  4  |       1, #> >  5  |       2, #> >  6  |       3 #> >  7  |     ], #>    8  |     \"a2\": \"string\" #>    9  |   }, #>   10  |   \"b\": [ #>   ...    #>   13  |     6 #>   14  |   ], #>   15  |   \"c\": { #> > 16  |     \"c1\": [ #> > 17  |       \"a\", #> > 18  |       \"b\" #> > 19  |     ] #>   20  |   } #>   21  | }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"See https://tree-sitter.github.io/tree-sitter/ writing tree-sitter queries. Captured nodes TOML document selected.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"","code":"select_query(json, query)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"json tsjson object. query String, tree-sitter query.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"the-json-grammar","dir":"Reference","previous_headings":"","what":"The JSON grammar","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"grammar following node types. included less important nodes subsection nodes related . Comments may appear tokens, part grammar. Use token_table(), syntax_tree_json() sexpr_json() explore parse tree JSON document.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"document","dir":"Reference","previous_headings":"","what":"document","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"#' document single value.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"values","dir":"Reference","previous_headings":"","what":"Values","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"value one : object, array, numebr, string, true, false, null.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"object-pair","dir":"Reference","previous_headings":"","what":"object / pair","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"object sequence {, zero pair nodes, separated , nodes, trailing commas allowed, }. pair series key, string node, :, value (see ).","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"array","dir":"Reference","previous_headings":"","what":"array","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"array sequence [, zero values (see ), separated , nodes, trailing commas allowed, ].","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"number","dir":"Reference","previous_headings":"","what":"number","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"integer floating point number. Minus sign part number. Scientific notation supported.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"string-string-content-escape-sequence","dir":"Reference","previous_headings":"","what":"string / string_content / escape_sequence","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"string sequence starting double quote (\"), zero string_content escape_sequence nodes, ending double quote (\").","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"true-false-null","dir":"Reference","previous_headings":"","what":"true / false / null","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"literals true, false, null. [`, zero values (see ), separated , nodes, trailing commas allowed, `]: R:%60,%0A-%20zero%20or%20more%20values%20(see%20above),%20separated%20by%20%60,%60%20nodes,%20trailing%0A%20%20commas%20are%20allowed,%0A-%20%60","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/select_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the nodes matching a tree-sitter query in a tsjson object — select_query","text":"","code":"# A very simple JSON document txt <- \"{ \\\"a\\\": 1, \\\"b\\\": \\\"foo\\\", \\\"c\\\": 20 }\"  # Take a look at it load_json(text = txt) |> format_selected() #> # json (5 lines) #> 1 | { #> 2 |     \"a\": 1, #> 3 |     \"b\": \"foo\", #> 4 |     \"c\": 20 #> 5 | }  # Select all pairs where the value is a number and change them to 100 load_json(text = txt) |>   select_query(\"((pair value: (number) @num))\") |>   update_selected(100) #> # json (1 line) #> 1 | { \"a\": 100, \"b\": \"foo\", \"c\": 100}"},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize an R object to JSON — serialize_json","title":"Serialize an R object to JSON — serialize_json","text":"Create JSON R object. Note function generic serializer can represent R object JSON. Also, expect unserialize_json() exact inverse serialize_json().","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize an R object to JSON — serialize_json","text":"","code":"serialize_json(obj, file = NULL, collapse = FALSE, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize an R object to JSON — serialize_json","text":"obj R object serialize. file NULL result written file. collapse file NULL whether return character scalar character vector. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize an R object to JSON — serialize_json","text":"file NULL character scalar (collapse = TRUE) vector (collapse = FALSE). file NULL nothing.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialize an R object to JSON — serialize_json","text":"tsjson functions update_selected() insert_into_selected() use serialize_json() create new JSON code. See example create possible JSON elements serialize_json().","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/serialize_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize an R object to JSON — serialize_json","text":"","code":"# null serialize_json(NULL) #> [1] \"null\"  # true, false, use a logical scalar serialize_json(TRUE) #> [1] \"true\" serialize_json(FALSE) #> [1] \"false\"  # strings, use a character scalar serialize_json(\"string with escapes: \\b \\ud020\") #> [1] \"\\\"string with escapes: \\\\b 퀠\\\"\"  # number, use a numeric scalar serialize_json(42.25) #> [1] \"42.25\"  # array, use an unnamed list, i.e. _not_ an atomic vector txt <- serialize_json(list(1, 2, 3,\"x\", \"y\")) load_json(text = txt) #> # json (7 lines) #> 1 | [ #> 2 |   1, #> 3 |   2, #> 4 |   3, #> 5 |   \"x\", #> 6 |   \"y\" #> 7 | ]  # empty array serialize_json(list()) #> [1] \"[]\"  # object, use a named (or partially named) list, i.e. _not_ an atomic vector txt <- serialize_json(list(a = 1, b = 2)) load_json(text = txt) #> # json (4 lines) #> 1 | { #> 2 |   \"a\": 1, #> 3 |   \"b\": 2 #> 4 | }  # empty object, use a named empty list serialize_json(structure(list(), names = character())) #> [1] \"{}\""},{"path":"https://gaborcsardi.github.io/tsjson/reference/sexpr_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the syntax tree structure of a JSON file or string — sexpr_json","title":"Show the syntax tree structure of a JSON file or string — sexpr_json","text":"Show syntax tree structure JSON file string","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/sexpr_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the syntax tree structure of a JSON file or string — sexpr_json","text":"","code":"sexpr_json(file = NULL, text = NULL, ranges = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/sexpr_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the syntax tree structure of a JSON file or string — sexpr_json","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/sexpr_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the syntax tree structure of a JSON file or string — sexpr_json","text":"","code":"sexpr_json(text = \"{ \\\"a\\\": true, \\\"b\\\": [1, 2, 3] }\") #> [1] \"(document (object (pair key: (string (string_content)) value: (true)) (pair key: (string (string_content)) value: (array (number) (number) (number)))))\""},{"path":"https://gaborcsardi.github.io/tsjson/reference/syntax_tree_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the annotated syntax tree of a JSON file or string — syntax_tree_json","title":"Show the annotated syntax tree of a JSON file or string — syntax_tree_json","text":"Show annotated syntax tree JSON file string","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/syntax_tree_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the annotated syntax tree of a JSON file or string — syntax_tree_json","text":"","code":"syntax_tree_json(   file = NULL,   text = NULL,   ranges = NULL,   fail_on_parse_error = TRUE,   options = NULL )"},{"path":"https://gaborcsardi.github.io/tsjson/reference/syntax_tree_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the annotated syntax tree of a JSON file or string — syntax_tree_json","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order. fail_on_parse_error Logical, whether error parse errors JSON document. Default TRUE. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/syntax_tree_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the annotated syntax tree of a JSON file or string — syntax_tree_json","text":"","code":"syntax_tree_json(text = \"{ \\\"a\\\": true, \\\"b\\\": [1, 2, 3] }\") #> document                  1| #> └─object                   | #>   ├─{                      |{ #>   ├─pair                   | #>   │ ├─string               | #>   │ │ ├─\"                  |  \" #>   │ │ ├─string_content     |   a #>   │ │ └─\"                  |    \" #>   │ ├─:                    |     : #>   │ └─true                 |       true #>   ├─,                      |           , #>   ├─pair                   | #>   │ ├─string               | #>   │ │ ├─\"                  |             \" #>   │ │ ├─string_content     |              b #>   │ │ └─\"                  |               \" #>   │ ├─:                    |                : #>   │ └─array                | #>   │   ├─[                  |                  [ #>   │   ├─number             |                   1 #>   │   ├─,                  |                    , #>   │   ├─number             |                      2 #>   │   ├─,                  |                       , #>   │   ├─number             |                         3 #>   │   └─]                  |                          ] #>   └─}                      |                            }"},{"path":"https://gaborcsardi.github.io/tsjson/reference/token_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the token table of a JSON file or string — token_table","title":"Get the token table of a JSON file or string — token_table","text":"Get token table JSON file string","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/token_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the token table of a JSON file or string — token_table","text":"","code":"token_table(   file = NULL,   text = NULL,   ranges = NULL,   fail_on_parse_error = TRUE,   options = NULL )"},{"path":"https://gaborcsardi.github.io/tsjson/reference/token_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the token table of a JSON file or string — token_table","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order. fail_on_parse_error Logical, whether error parse errors JSON document. Default TRUE. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/token_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the token table of a JSON file or string — token_table","text":"data frame one row per token, columns: id: integer, id token. parent: integer, id parent token. root token parent NA field_name: character, field name token parent. type: character, type token. code: character, actual code token. start_byte, end_byte: integer, byte positions token input. start_row, start_column, end_row, end_column: integer, position token input. is_missing: logical, whether token missing token added parser recover errors. has_error: logical, whether token parse error. children: list integer vectors, ids children tokens.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/token_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the token table of a JSON file or string — token_table","text":"","code":"token_table(text = \"{ \\\"a\\\": true, \\\"b\\\": [1, 2, 3] }\") #> # A data frame: 26 × 15 #>       id parent field_name type     code  start_byte end_byte start_row #>    <int>  <int> <chr>      <chr>    <chr>      <int>    <int>     <int> #>  1     1     NA NA         \"docume…  NA            0       29         0 #>  2     2      1 NA         \"object\"  NA            0       29         0 #>  3     3      2 NA         \"{\"      \"{\"            0        1         0 #>  4     4      2 NA         \"pair\"    NA            2       11         0 #>  5     5      4 key        \"string\"  NA            2        5         0 #>  6     6      5 NA         \"\\\"\"     \"\\\"\"           2        3         0 #>  7     7      5 NA         \"string… \"a\"            3        4         0 #>  8     8      5 NA         \"\\\"\"     \"\\\"\"           4        5         0 #>  9     9      4 NA         \":\"      \":\"            5        6         0 #> 10    10      4 value      \"true\"   \"tru…          7       11         0 #> # ℹ 16 more rows #> # ℹ 7 more variables: start_column <int>, end_row <int>, #> #   end_column <int>, is_missing <lgl>, has_error <lgl>, #> #   expected <list>, children <I<list>>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-brackets.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tsjson object to a data frame — tsjson-brackets","title":"Convert a tsjson object to a data frame — tsjson-brackets","text":"Create data frame syntax tree JSON document, indexing tsjson object single brackets. occasionally useful exploration debugging.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-brackets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tsjson object to a data frame — tsjson-brackets","text":"","code":"# S3 method for class 'tsjson' x[i, j, drop = FALSE]"},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-brackets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tsjson object to a data frame — tsjson-brackets","text":"x tsjson object. , j indices. drop Ignored.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-brackets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tsjson object to a data frame — tsjson-brackets","text":"data frame columns: id, parent, field_name, type, code, start_byte, end_byte, start_row, start_column, end_row, end_column, is_missing, has_error, expected, children, tws.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-brackets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tsjson object to a data frame — tsjson-brackets","text":"","code":"json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) )))  json #> # json (21 lines) #>  1 | { #>  2 |   \"a\": { #>  3 |     \"a1\": [ #>  4 |       1, #>  5 |       2, #>  6 |       3 #>  7 |     ], #>  8 |     \"a2\": \"string\" #>  9 |   }, #> 10 |   \"b\": [ #> ℹ 11 more lines #> ℹ Use `print(n = ...)` to see more lines  json[] #> # A data frame: 81 × 16 #>       id parent field_name type     code  start_byte end_byte start_row #>    <int>  <int> <chr>      <chr>    <chr>      <int>    <int>     <int> #>  1     1     NA NA         \"docume…  NA            0      167         0 #>  2     2      1 NA         \"object\"  NA            0      167         0 #>  3     3      2 NA         \"{\"      \"{\"            0        1         0 #>  4     4      2 NA         \"pair\"    NA            4       78         1 #>  5     5      4 key        \"string\"  NA            4        7         1 #>  6     6      5 NA         \"\\\"\"     \"\\\"\"           4        5         1 #>  7     7      5 NA         \"string… \"a\"            5        6         1 #>  8     8      5 NA         \"\\\"\"     \"\\\"\"           6        7         1 #>  9     9      4 NA         \":\"      \":\"            7        8         1 #> 10    10      4 value      \"object\"  NA            9       78         1 #> # ℹ 71 more rows #> # ℹ 8 more variables: start_column <int>, end_row <int>, #> #   end_column <int>, is_missing <lgl>, has_error <lgl>, #> #   expected <list>, children <I<list>>, tws <chr>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tsjson: Edit JSON Files — tsjson-package","title":"tsjson: Edit JSON Files — tsjson-package","text":"Extract manipulate parts JSON files without touching formatting comments parts.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tsjson: Edit JSON Files — tsjson-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com contributors: Posit Software, PBC (ROR) [copyright holder, funder] tree-sitter-json authors [contributor]","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson_options.html","id":null,"dir":"Reference","previous_headings":"","what":"tsjson options — tsjson_options","title":"tsjson options — tsjson_options","text":"Options control behavior tsjson functions.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson_options.html","id":"parsing-options-","dir":"Reference","previous_headings":"","what":"Parsing options:","title":"tsjson options — tsjson_options","text":"allow_empty_content: logical, whether allow empty JSON documents. Default TRUE. allow_comments: logical, whether allow comments JSON documents. Default TRUE. allow_trailing_comma: logical, whether allow trailing commas JSON documents. Default TRUE.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/tsjson_options.html","id":"formatting-options-","dir":"Reference","previous_headings":"","what":"Formatting options:","title":"tsjson options — tsjson_options","text":"format: Formatting style, one : \"pretty\": arrays objects formatted multiple lines, \"compact\": format everything without whitespace, \"oneline\": format everything without newlines, include whitespace commas, colons, opening brackets braces, closing brackets braces. Default rpretty* indent_width: integer, number spaces use indentation indent_styleis\"space\"`. Default  indent_style: string, either \"space\" \"tab\", type indentation use. Default space.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Unserialize a JSON file or string into an R object — unserialize_json","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"purpose function convert JSON file string R object reliably.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"","code":"unserialize_json(file = NULL, text = NULL, ranges = NULL, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"file Path JSON file. Use either file text. text JSON string. Use either file text. ranges Can used parse part(s) input. must data frame integer columns start_row, start_col, end_row, end_col, start_byte, end_byte, order. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"R object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"See examples different JSON elements mapped R objects.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unserialize a JSON file or string into an R object — unserialize_json","text":"","code":"# null -> NULL unserialize_json(text = \"null\") #> NULL  # true, false -> TRUE, FALSE unserialize_json(text = \"true\") #> [1] TRUE unserialize_json(text = \"false\") #> [1] FALSE  # string -> character scalar unserialize_json(text = \"\\\"string with escapes: \\\\b \\\\ud020\\\"\") #> [1] \"string with escapes: \\b 퀠\"  # number -> double scalar unserialize_json(text = \"42.25\") #> [1] 42.25  # array -> unnamed list unserialize_json(text = \"[1, 2, 3]\") #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>   # object -> named list unserialize_json(text = \"{\\\"a\\\": 1, \\\"b\\\": 2 }\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Unserialize selected elements from a tsjson object — unserialize_selected","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"Uses unserialize_json() selected elements.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"","code":"unserialize_selected(json)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"json tsjson object.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"List R objects, unserialization selected element tsjson.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"json selection, unserialized. json empty selection, empty list returned.","code":""},{"path":[]},{"path":"https://gaborcsardi.github.io/tsjson/reference/unserialize_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unserialize selected elements from a tsjson object — unserialize_selected","text":"","code":"json <- load_json(text = serialize_json(list(   a = list(a1 = list(1,2,3), a2 = \"string\"),   b = list(4, 5, 6),   c = list(c1 = list(\"a\", \"b\")) ))) json |> select(c(\"b\", \"c\")) |> unserialize_selected() #> [[1]] #> [[1]][[1]] #> [1] 4 #>  #> [[1]][[2]] #> [1] 5 #>  #> [[1]][[3]] #> [1] 6 #>  #>  #> [[2]] #> [[2]]$c1 #> [[2]]$c1[[1]] #> [1] \"a\" #>  #> [[2]]$c1[[2]] #> [1] \"b\" #>  #>  #>"},{"path":"https://gaborcsardi.github.io/tsjson/reference/update_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace selected JSON elements with a new element — update_selected","title":"Replace selected JSON elements with a new element — update_selected","text":"Replace selected elements new element. json selection whole document replaced. json empty selection, nothing happens.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/update_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace selected JSON elements with a new element — update_selected","text":"","code":"update_selected(json, new, options = NULL)"},{"path":"https://gaborcsardi.github.io/tsjson/reference/update_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace selected JSON elements with a new element — update_selected","text":"json tsjson object. new R object serialized JSON (using serialize_json()) inserted place selected JSON elements. options List options, see tsjson_options(). argument must named abbreviated.","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/update_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace selected JSON elements with a new element — update_selected","text":"updated tsjson object","code":""},{"path":"https://gaborcsardi.github.io/tsjson/reference/update_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace selected JSON elements with a new element — update_selected","text":"","code":"json <- load_json(text = \"{ \\\"a\\\": true, \\\"b\\\": [1, 2, 3] }\") json #> # json (1 line) #> 1 | { \"a\": true, \"b\": [1, 2, 3] }  json |> select(\"a\") |> update_selected(list(\"new\", \"element\")) #> # json (4 lines) #> 1 | { \"a\": [ #> 2 |   \"new\", #> 3 |   \"element\" #> 4 | ], \"b\": [1, 2, 3] }"}]
